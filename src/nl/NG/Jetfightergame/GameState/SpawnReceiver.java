package nl.NG.Jetfightergame.GameState;

import nl.NG.Jetfightergame.AbstractEntities.AbstractJet;
import nl.NG.Jetfightergame.AbstractEntities.Factories.EntityFactory;
import nl.NG.Jetfightergame.AbstractEntities.Powerups.PowerupEntity;
import nl.NG.Jetfightergame.AbstractEntities.Powerups.PowerupType;
import nl.NG.Jetfightergame.Engine.GameTimer;
import nl.NG.Jetfightergame.Rendering.Particles.ParticleCloud;
import nl.NG.Jetfightergame.Tools.Vectors.Color4f;
import nl.NG.Jetfightergame.Tools.Vectors.DirVector;
import nl.NG.Jetfightergame.Tools.Vectors.PosVector;

import java.util.Collection;

/**
 * entities generated by other entities can leave them with objects implementing this interface.
 * These classes should make sure that all required actions are taken to implement the new entity into the game
 * @author Geert van Ieperen
 * created on 5-2-2018.
 */
public interface SpawnReceiver {

    /**
     * adds an moving entity to the game's collision detection and rendering
     * @param entityFactory the new entity
     */
    void addSpawn(EntityFactory entityFactory);

    /**
     * add multiple new entities
     * @see #addSpawn(EntityFactory)
     */
    default void addSpawns(Collection<EntityFactory> entityFactory) {
        for (EntityFactory entity : entityFactory) {
            addSpawn(entity);
        }
    }

    GameTimer getTimer();

    /**
     * adds an explosion of given magnitude to the game's rendering
     * @see nl.NG.Jetfightergame.Rendering.Particles.Particles#explosion(PosVector, DirVector, Color4f, Color4f, float, int, float, float)
     */
    void addExplosion(PosVector position, DirVector direction, Color4f color1, Color4f color2, float power, int density, float lingerTime, float particleSize);

    /**
     * notifies about the collection of a powerup. The given entity has already processed the collection with success
     * @param powerup the entity that is collected
     * @param isCollected
     */
    void powerupCollect(PowerupEntity powerup, float collectionTime, boolean isCollected);

    void playerPowerupState(AbstractJet jet, PowerupType newType);

    /**
     * adds the given ParticleCloud to the game's rendering
     * @param particles the particles to add
     */
    void addParticles(ParticleCloud particles);
}
